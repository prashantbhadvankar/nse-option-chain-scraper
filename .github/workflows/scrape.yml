name: Scrape NSE Option Chain

on:
  schedule:
    # 03:30–03:50 UTC  (09:00–09:20 IST)
    - cron: "30-59/10 3 * * 1-5"
    # 04:00–09:50 UTC  (09:30–15:20 IST)
    - cron: "*/10 4-9 * * 1-5"
    # 10:00–10:30 UTC  (15:30–16:00 IST)
    - cron: "0-30/10 10 * * 1-5"
  workflow_dispatch: {}

# prevent overlapping runs from stepping on each other
concurrency:
  group: nse-option-chain
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  scrape:
    runs-on: ubuntu-latest

    services:
      selenium:
        image: selenium/standalone-firefox:latest
        ports:
          - 4444:4444
        options: >-
          --shm-size="2g"
          --health-cmd="curl -sf http://localhost:4444/status | grep -q '\"ready\": true' || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=60

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup R
        uses: r-lib/actions/setup-r@v2

      - name: Install R deps (pak)
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          packages: |
            any::RSelenium
            any::rvest
            any::dplyr
            any::tidyr
            any::readr
            any::readxl
            any::writexl
            any::stringr
            any::httr
            any::jsonlite

      - name: Random jitter (2–15s)
        run: |
          s=$((RANDOM % 14 + 2)); echo "Sleeping $s s"; sleep $s

      - name: Wait for Selenium
        run: |
          for i in {1..60}; do
            if curl -sf http://localhost:4444/status | grep -q '"ready": true'; then
              echo "Selenium is ready"; exit 0
            fi
            echo "Waiting for Selenium... ($i/60)"; sleep 2
          done
          echo "Selenium not ready in time"; exit 1

      - name: Run scraper
        run: Rscript scrape_nse.R

      - name: Commit results to repo (main branch)
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          echo "Output dir contents:"; ls -lah output || true

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add output/*.csv  2>/dev/null || true
          git add output/*.xlsx 2>/dev/null || true
          git add output/*_raw.json 2>/dev/null || true

          if git diff --cached --quiet; then
            echo "No changes to commit."; exit 0
          fi

          git commit -m "Update option chain $(date -u +"%Y-%m-%d %H:%M:%S") UTC"

          # Rebase + retry to avoid non-fast-forward failures
          for a in 1 2 3; do
            git fetch origin main
            git rebase origin/main || (git rebase --abort && sleep $((5*a)) && continue)
            if git push origin HEAD:main; then
              echo "Push ok on attempt $a"; exit 0
            fi
            echo "Push failed; retrying…"; sleep $((5*a))
          done
          echo "Push failed after retries"; exit 1

      - name: Upload artifacts (outputs + debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: option-chain-output
          path: |
            output/**
            debug/**
          if-no-files-found: warn
          retention-days: 30
