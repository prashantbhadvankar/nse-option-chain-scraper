name: Scrape NSE Option Chain

on:
  schedule:
    # Mon–Fri, every 10 min, 09:00–16:00 IST (UTC 03:30–10:30)
    - cron: "*/10 3-10 * * 1-5"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  scrape:
    runs-on: ubuntu-latest

    services:
      selenium:
        image: selenium/standalone-firefox:latest
        ports:
          - 4444:4444
        options: >-
          --shm-size="2g"
          --health-cmd="curl -sf http://localhost:4444/status | grep -q '\"ready\": true' || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=30

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2

      - name: Install R deps (pak)
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          packages: |
            any::RSelenium
            any::rvest
            any::dplyr
            any::tidyr
            any::readr
            any::readxl
            any::writexl
            any::stringr
            any::httr
            any::jsonlite

      - name: Wait for Selenium
        run: |
          for i in {1..60}; do
            if curl -sf http://localhost:4444/status | grep -q '"ready": true'; then
              echo "Selenium is ready"; exit 0
            fi
            echo "Waiting for Selenium... ($i/60)"; sleep 2
          done
          echo "Selenium not ready in time"; exit 1

      - name: Run scraper
        run: Rscript scrape_nse.R

      - name: Commit results to repo (main branch)
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Output dir contents:"
          ls -lah output || true

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add output/*.csv  2>/dev/null || true
          git add output/*.xlsx 2>/dev/null || true
          git add output/*_raw.json 2>/dev/null || true

          if ! git diff --cached --quiet; then
            git commit -m "Update option chain $(date -u +"%Y-%m-%d %H:%M:%S") UTC"
            git push
          else
            echo "No changes to commit."
          fi

      # ---------- Google Drive upload (with diagnostics) ----------
      - name: Upload latest Excel to Google Drive
        if: success()
        env:
          GDRIVE_SA_JSON: ${{ secrets.GDRIVE_SA_JSON }}
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
        run: |
          set -euo pipefail

          echo "$GDRIVE_SA_JSON" > sa.json

          LATEST_XLSX="$(ls -1t output/*.xlsx | head -n 1)"
          echo "Uploading: ${LATEST_XLSX}"
          echo "Folder ID: ${GDRIVE_FOLDER_ID}"

          # Diagnostic: verify access to the folder by ID
          rclone -vv lsf ":drive,service_account_file=sa.json,root_folder_id=${GDRIVE_FOLDER_ID}:" || {
            echo ">>> ERROR: rclone couldn't access the folder."
            echo "    Check BOTH:"
            echo "      - GDRIVE_FOLDER_ID is the exact folder ID (from URL after 'folders/')"
            echo "      - The service account is shared on that folder (Editor) or added to the Shared Drive."
            exit 1
          }

          # Upload newest Excel
          rclone -vv copy "${LATEST_XLSX}" ":drive,service_account_file=sa.json,root_folder_id=${GDRIVE_FOLDER_ID}:" --progress

          echo "Upload complete."

      - name: Upload artifacts (outputs + debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: option-chain-output
          path: |
            output/**
            debug/**
          if-no-files-found: warn
